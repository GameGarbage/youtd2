name: build-and-publish

on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:    
      - main
    # Sequence of patterns matched against refs/tags
    tags:        
      - v*

jobs:
  export_game:
    runs-on: ubuntu-latest
    name: export game
    steps:
    - name: checkout
      uses: actions/checkout@v3.0.2
      with:
        fetch-depth: 0

    - name: generate version for the build
      id: generate_version
      run: |
        latest_tag=$(git describe --abbrev=0 --tags)
        short_hash=$(git rev-parse --short HEAD)
        echo "TAG_VERSION: ${latest_tag}-${short_hash}"
        echo "COMMIT_REF: $GITHUB_REF_NAME"
        echo "TAG_VERSION=${latest_tag}-${short_hash}" >> $GITHUB_ENV
        echo "COMMIT_REF=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT

    - name: release requested check
      run: |
        if [[ ${{ steps.generate_version.outputs.COMMIT_REF }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then
            echo "COMMIT_REF=${{ steps.generate_version.outputs.COMMIT_REF }}" >> "$GITHUB_ENV"
            echo "NEED=true" >> "$GITHUB_ENV"
            echo 'true'
        else
            echo "NEED=false" >> "$GITHUB_ENV"
            echo 'false'
        fi

    - name: update project.godot with new version
      run: |
        project_godot_file="${{ github.workspace }}/project.godot"
        sed -i 's/\(config\/version="\).*\("\)/\1'"${TAG_VERSION}"'\2/' "${project_godot_file}"
        echo "New project.godot contents:"
        cat ${{ github.workspace }}/project.godot

    - name: use custom editor settings
      run: |
        mkdir -p .config/godot
        cp ${{ github.workspace }}/.github/workflows/editor_settings-4.tres .config/godot/

    - name: install wine
      id: wine_install
      run: |
        sudo apt install wine64
        echo "WINE_PATH=$(which wine64)" >> $GITHUB_OUTPUT
    
    - name: export game
      id: export
      uses: firebelley/godot-export@v5.0.0
      with:
        godot_executable_download_url: https://github.com/godotengine/godot/releases/download/4.0.2-stable/Godot_v4.0.2-stable_linux.x86_64.zip
        godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/4.0.2-stable/Godot_v4.0.2-stable_export_templates.tpz
        relative_project_path: ./
        verbose: true
        export_debug: false
        archive_output: true
        wine_path: ${{ steps.wine_install.outputs.WINE_PATH }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: list the result
      run: |
        ls -R ${{ steps.export.outputs.archive_directory }}

    outputs:
      tag_version: ${{ env.TAG_VERSION }}
      commit_ref: ${{ env.COMMIT_REF }}
      release_flag: ${{ env.NEED }}
      export_dir: ${{ steps.export.outputs.build_directory }}
      archive_dir: ${{ steps.export.outputs.archive_directory }}

  upload_macos_client:
    runs-on: ubuntu-latest
    name: upload macos client
    needs: export_game
    steps:
    - uses: actions/upload-artifact@v3
      with:
        name: youtd-macos-${{ needs.export_game.outputs.tag_version }}
        path: ${{ needs.export_game.outputs.archive_dir }}/macos.zip

  upload_web_client:
    runs-on: ubuntu-latest
    name: upload web client
    needs: export_game
    steps:
    - name: copy required assets
      run: |
        ls -R /home/runner/work/youtd2
        cp ${{ github.workspace }}/Build/Web/* ${{ needs.export_game.outputs.build_directory }}/web/
        zip -r -FS ${{ needs.export_game.outputs.archive_directory }}/web.zip ${{ needs.export_game.outputs.build_directory }}/web

    - uses: actions/upload-artifact@v3
      with:
        name: youtd-web-${{ needs.export_game.outputs.tag_version }}
        path: ${{ needs.export_game.outputs.export_dir }}/web.zip

    outputs:
      artifact_name: youtd-web-${{ needs.export_game.outputs.tag_version }}

  upload_windows_client:
    runs-on: ubuntu-latest
    name: upload windows client
    needs: export_game
    steps:
    - uses: actions/upload-artifact@v3
      with:
        name: youtd-windows-${{ needs.export_game.outputs.tag_version }}
        path: ${{ needs.export_game.outputs.export_dir }}/windows.zip


  upload_linux_client:
    runs-on: ubuntu-latest
    name: upload linux client
    needs: export_game
    steps:
    - uses: actions/upload-artifact@v3
      with:
        name: youtd-linux-${{ needs.export_game.outputs.tag_version }}
        path: ${{ needs.export_game.outputs.export_dir }}/linux.zip

  deploy_artifacts:
    runs-on: ubuntu-latest
    name: deploy artifacts to gh-pages
    needs: upload_web_client
    steps:
    - name: download web artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.upload_web_client.outputs.artifact_name }}
        
    - name: deploy to github pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .

  create_release:
      name: create release
      needs: [export_game, upload_windows_client, upload_macos_client, upload_linux_client, upload_web_client]
      if: needs.export_game.outputs.release_flag == 'true'
      runs-on: ubuntu-latest
      steps:
        - name: show props
          run: |
            echo "Commit ref: $GITHUB_REF_NAME"
            echo "Release tag: ${{ needs.export_game.outputs.commit_ref }}"
        
        - name: download artifacts
          uses: actions/download-artifact@v3
          with:
            path: .
            
        - name: display structure of downloaded files
          run: ls -R
          working-directory: .

        - name: release client
          uses: ncipollo/release-action@v1.11.2
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            tag: ${{ needs.export_game.outputs.commit_ref }}
            generateReleaseNotes: true
            artifacts: ./*
